/******************************************************************************
* The MIT License
* Copyright (c) 2003 Novell Inc.  www.novell.com
*
* Permission is hereby granted, free of charge, to any person obtaining  a copy
* of this software and associated documentation files (the Software), to deal
* in the Software without restriction, including  without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to  permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*******************************************************************************/

//
// Novell.Directory.Ldap.LdapResultCode.cs
//
// Author:
//   Sunil Kumar (Sunilk@novell.com)
//
// (C) 2003 Novell, Inc (http://www.novell.com)
//

using System;
using System.Globalization;
using Novell.Directory.Ldap.Utilclass;

namespace Novell.Directory.Ldap
{
    /// <summary>
    ///     Thrown to indicate that an Ldap exception has occurred. This is a general
    ///     exception which includes a message and an Ldap result code.
    ///     An LdapException can result from physical problems (such as
    ///     network errors) as well as problems with Ldap operations detected
    ///     by the server. For example, if an Ldap add operation fails because of a
    ///     duplicate entry, the server returns a result code.
    ///     Five possible sources of information are available from LdapException:
    ///     <dl>
    ///         <dt>Result Code:</dt>
    ///         <dd>
    ///             The <code>getResultCode</code> method returns a result code,
    ///             which can be compared against standard Ldap result codes.
    ///         </dd>
    ///         <dt>Message:</dt>
    ///         <dd>
    ///             The <code>getMessage</code> method returns a localized message
    ///             from the message resource that corresponds to the result code.
    ///         </dd>
    ///         <dt>Ldap server Message:</dt>
    ///         <dd>
    ///             The <code>getLdapErrorMessage</code> method returns any error
    ///             message received from the Ldap server.
    ///         </dd>
    ///         <dt>Matched DN:</dt>
    ///         <dd>
    ///             The <code>getMatchedDN</code> method retrieves the part of a
    ///             submitted distinguished name which could be matched by the server
    ///         </dd>
    ///         <dt>Root Cause:</dt>
    ///         <dd>
    ///             The <code>getCause</code> method returns the a nested exception
    ///             that was the original cause for the error.
    ///         </dd>
    ///     </dl>
    ///     The. <code>ToString</code> method returns a string containing all
    ///     the above sources of information, if they have a value.
    ///     Exceptions generated by the API, i.e. that are not a result
    ///     of a server response, can be identified as
    ///     <tt>
    ///         instanceof
    ///         {@link LdapLocalException}
    ///     </tt>
    ///     The following table lists the standard Ldap result codes.
    ///     See RFC2251 for a discussion of the meanings of the result codes.
    ///     The corresponding ASN.1 definition from RFC2251 is provided in parentheses.
    ///     <table>
    ///         <tr>
    ///             <td>
    ///                 <b>Value</b>
    ///             </td>
    ///             <td>
    ///                 <b>Result Code</b>
    ///             </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 0</td><td>{@link #SUCCESS} (success) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 1</td><td>{@link #OPERATIONS_ERROR} (operationsError) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 2</td><td>{@link #PROTOCOL_ERROR} (protocolError) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 3</td><td>{@link #TIME_LIMIT_EXCEEDED} (timeLimitExceeded) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 4</td><td>{@link #SIZE_LIMIT_EXCEEDED} (sizeLimitExceeded) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 5</td><td>{@link #COMPARE_FALSE} (compareFalse) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 6</td><td>{@link #COMPARE_TRUE} (compareTrue) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 7</td><td>{@link #AUTH_METHOD_NOT_SUPPORTED} (authMethodNotSupported) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 8</td><td>{@link #STRONG_AUTH_REQUIRED} (strongAuthRequired) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 10</td><td>{@link #REFERRAL} (referral) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 11</td><td>{@link #ADMIN_LIMIT_EXCEEDED} (adminLimitExceeded) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 12</td><td>{@link #UNAVAILABLE_CRITICAL_EXTENSION} (unavailableCriticalExtension) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 13</td><td>{@link #CONFIDENTIALITY_REQUIRED} (confidentialityRequired) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 14</td><td>{@link #SASL_BIND_IN_PROGRESS} (saslBindInProgress) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 16</td><td>{@link #NO_SUCH_ATTRIBUTE} (noSuchAttribute) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 17</td><td>{@link #UNDEFINED_ATTRIBUTE_TYPE} (undefinedAttributeType) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 18</td><td>{@link #INAPPROPRIATE_MATCHING} (inappropriateMatching) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 19</td><td>{@link #CONSTRAINT_VIOLATION} (constraintViolation) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 20</td><td>{@link #ATTRIBUTE_OR_VALUE_EXISTS} (AttributeOrValueExists) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 21</td><td>{@link #INVALID_ATTRIBUTE_SYNTAX} (invalidAttributeSyntax) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 32</td><td>{@link #NO_SUCH_OBJECT} (noSuchObject) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 33</td><td>{@link #ALIAS_PROBLEM} (aliasProblem) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 34</td><td>{@link #INVALID_DN_SYNTAX} (invalidDNSyntax) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 35</td><td>{@link #IS_LEAF} (isLeaf) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 36</td><td>{@link #ALIAS_DEREFERENCING_PROBLEM} (aliasDereferencingProblem) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 48</td><td>{@link #INAPPROPRIATE_AUTHENTICATION} (inappropriateAuthentication) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 49</td><td>{@link #INVALID_CREDENTIALS} (invalidCredentials) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 50</td><td>{@link #INSUFFICIENT_ACCESS_RIGHTS} (insufficientAccessRights) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 51</td><td>{@link #BUSY} (busy) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 52</td><td>{@link #UNAVAILABLE} (unavailable) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 53</td><td>{@link #UNWILLING_TO_PERFORM} (unwillingToPerform) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 54</td><td>{@link #LOOP_DETECT} (loopDetect) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 64</td><td>{@link #NAMING_VIOLATION} (namingViolation) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 65</td><td>{@link #OBJECT_CLASS_VIOLATION} (objectClassViolation) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 66</td><td>{@link #NOT_ALLOWED_ON_NONLEAF} (notAllowedOnNonLeaf) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 67</td><td>{@link #NOT_ALLOWED_ON_RDN} (notAllowedOnRDN) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 68</td><td>{@link #ENTRY_ALREADY_EXISTS} (entryAlreadyExists) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 69</td><td>{@link #OBJECT_CLASS_MODS_PROHIBITED} (objectClassModsProhibited) </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 71</td><td>{@link #AFFECTS_MULTIPLE_DSAS} (affectsMultipleDSAs </td>
    ///         </tr>
    ///         <tr>
    ///             <td> 80</td><td>{@link #OTHER} (other) </td>
    ///         </tr>
    ///     </table>
    ///     Local errors, resulting from actions other than an operation on a
    ///     server.
    ///     <table>
    ///         <tr>
    ///             <td>
    ///                 <b>Value</b>
    ///             </td>
    ///             <td>
    ///                 <b>Result Code</b>
    ///             </td>
    ///         </tr>
    ///         <tr>
    ///             <td>81</td><td>{@link #SERVER_DOWN}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>82</td><td>{@link #LOCAL_ERROR}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>83</td><td>{@link #ENCODING_ERROR}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>84</td><td>{@link #DECODING_ERROR}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>85</td><td>{@link #Ldap_TIMEOUT}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>86</td><td>{@link #AUTH_UNKNOWN}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>87</td><td>{@link #FILTER_ERROR}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>88</td><td>{@link #USER_CANCELLED}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>90</td><td>{@link #NO_MEMORY}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>91</td><td>{@link #CONNECT_ERROR}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>92</td><td>{@link #Ldap_NOT_SUPPORTED}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>93</td><td>{@link #CONTROL_NOT_FOUND}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>94</td><td>{@link #NO_RESULTS_RETURNED}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>95</td><td>{@link #MORE_RESULTS_TO_RETURN}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>96</td><td>{@link #CLIENT_LOOP}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>97</td><td>{@link #REFERRAL_LIMIT_EXCEEDED}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>100</td><td>{@link #INVALID_RESPONSE}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>101</td><td>{@link #AMBIGUOUS_RESPONSE}</td>
    ///         </tr>
    ///         <tr>
    ///             <td>112</td><td>{@link #TLS_NOT_SUPPORTED}</td>
    ///         </tr>
    ///     </table>
    /// </summary>
    public class LdapException : Exception
    {
        // The Matched DN

        /*  public override System.String Message
                {
                    get
                    {
                        return resultCodeToString();
                    }

                }
            */

        // A message from the server
        private readonly string _serverMessage;

        // The arguments associated with the localized message
        private object[] _arguments;

        // The localized message
        private string _messageOrKey;

        /*
                * Note: Error strings have been pulled out into
                * ResultCodeMessages.txt
                */

        /// <summary> Constructs a default exception with no specific error information.</summary>
        public LdapException()
        {
        }

        public LdapException(string messageOrKey)
              : this(messageOrKey, LdapResultCode.Other, "")
        {
        }

        public LdapException(Exception rootException)
            : this(rootException?.Message ?? "", LdapResultCode.Other, "", rootException)
        {
        }

        /// <summary>
        ///     Constructs an exception with a detailed message obtained from the
        ///     specified. <code>MessageOrKey</code> String, the result code,
        ///     and a server meessage.
        ///     The String is used either as a message key to obtain a localized
        ///     messsage from ExceptionMessages, or if there is no key in the
        ///     resource matching the text, it is used as the detailed message itself.
        /// </summary>
        /// <param name="messageOrKey">
        ///     Key to addition result information, a key into
        ///     ExceptionMessages, or the information
        ///     itself if the key doesn't exist.
        /// </param>
        /// <param name="resultCode">
        ///     The result code returned.
        /// </param>
        /// <param name="serverMsg">
        ///     Error message specifying additional information
        ///     from the server.
        /// </param>
        public LdapException(string messageOrKey, LdapResultCode resultCode, string serverMsg)
            : this(messageOrKey, null, resultCode, serverMsg, null, null)
        {
        }

        /// <summary>
        ///     Constructs an exception with a detailed message obtained from the
        ///     specified. <code>MessageOrKey</code> String and modifying arguments.
        ///     Additional parameters specify the result code and server message.
        ///     The String is used either as a message key to obtain a localized
        ///     messsage from ExceptionMessages, or if there is no key in the
        ///     resource matching the text, it is used as the detailed message itself.
        ///     The message in the default locale is built with the supplied arguments,
        ///     which are saved to be used for building messages for other locales.
        /// </summary>
        /// <param name="messageOrKey">
        ///     Key to addition result information, a key into
        ///     ExceptionMessages, or the information
        ///     itself if the key doesn't exist.
        /// </param>
        /// <param name="arguments">
        ///     The modifying arguments to be included in the
        ///     message string.
        /// </param>
        /// <param name="serverMsg">
        ///     Error message specifying additional information
        ///     from the server.
        /// </param>
        /// <param name="resultCode">
        ///     The result code returned.
        /// </param>
        public LdapException(string messageOrKey, object[] arguments, LdapResultCode resultCode, string serverMsg)
            : this(messageOrKey, arguments, resultCode, serverMsg, null, null)
        {
        }

        /// <summary>
        ///     Constructs an exception with a detailed message obtained from the
        ///     specified. <code>MessageOrKey</code> String.
        ///     Additional parameters specify the result code, the server message, and a
        ///     rootException which is the underlying cause of an error on the client.
        ///     The String is used either as a message key to obtain a localized
        ///     messsage from ExceptionMessages, or if there is no key in the
        ///     resource matching the text, it is used as the detailed message itself.
        /// </summary>
        /// <param name="messageOrKey">
        ///     Key to addition result information, a key into
        ///     ExceptionMessages, or the information
        ///     itself if the key doesn't exist.
        /// </param>
        /// <param name="resultCode">
        ///     The result code returned.
        /// </param>
        /// <param name="serverMsg">
        ///     Error message specifying additional information
        ///     from the server.
        /// </param>
        /// <param name="rootException">
        ///     A throwable which is the underlying cause
        ///     of the LdapResultCode.
        /// </param>
        public LdapException(string messageOrKey, LdapResultCode resultCode, string serverMsg, Exception rootException)
            : this(messageOrKey, null, resultCode, serverMsg, null, rootException)
        {
        }

        /// <summary>
        ///     Constructs an exception with a detailed message obtained from the
        ///     specified. <code>MessageOrKey</code> String and modifying arguments.
        ///     Additional parameters specify the result code, the server message,
        ///     and a rootException which is the underlying cause of an error
        ///     on the client.
        ///     The String is used either as a message key to obtain a localized
        ///     messsage from ExceptionMessages, or if there is no key in the
        ///     resource matching the text, it is used as the detailed message itself.
        ///     The message in the default locale is built with the supplied arguments,
        ///     which are saved to be used for building messages for other locales.
        /// </summary>
        /// <param name="messageOrKey">
        ///     Key to addition result information, a key into
        ///     ExceptionMessages, or the information
        ///     itself if the key doesn't exist.
        /// </param>
        /// <param name="arguments">
        ///     The modifying arguments to be included in the
        ///     message string.
        /// </param>
        /// <param name="resultCode">
        ///     The result code returned.
        /// </param>
        /// <param name="serverMsg">
        ///     Error message specifying additional information
        ///     from the server.
        /// </param>
        /// <param name="rootException">
        ///     A throwable which is the underlying cause
        ///     of the LdapResultCode.
        /// </param>
        public LdapException(string messageOrKey, object[] arguments, LdapResultCode resultCode, string serverMsg,
            Exception rootException)
            : this(messageOrKey, arguments, resultCode, serverMsg, null, rootException)
        {
        }

        /// <summary>
        ///     Constructs an exception with a detailed message obtained from the
        ///     specified. <code>MessageOrKey</code> String.
        ///     Additional parameters specify the result code, the message returned
        ///     from the server, and a matchedDN returned from the server.
        ///     The String is used either as a message key to obtain a localized
        ///     messsage from ExceptionMessages, or if there is no key in the
        ///     resource matching the text, it is used as the detailed message itself.
        /// </summary>
        /// <param name="messageOrKey">
        ///     Key to addition result information, a key into
        ///     ExceptionMessages, or the information
        ///     itself if the key doesn't exist.
        /// </param>
        /// <param name="resultCode">
        ///     The result code returned.
        /// </param>
        /// <param name="serverMsg">
        ///     Error message specifying additional information
        ///     from the server.
        /// </param>
        /// <param name="matchedDn">
        ///     The maximal subset of a specified DN which could
        ///     be matched by the server on a search operation.
        /// </param>
        public LdapException(string messageOrKey, LdapResultCode resultCode, string serverMsg, string matchedDn)
            : this(messageOrKey, null, resultCode, serverMsg, matchedDn, null)
        {
        }

        /// <summary>
        ///     Constructs an exception with a detailed message obtained from the
        ///     specified. <code>MessageOrKey</code> String and modifying arguments.
        ///     Additional parameters specify the result code, a message returned from
        ///     the server, and a matchedDN returned from the server.
        ///     The String is used either as a message key to obtain a localized
        ///     messsage from ExceptionMessages, or if there is no key in the
        ///     resource matching the text, it is used as the detailed message itself.
        ///     The message in the default locale is built with the supplied arguments,
        ///     which are saved to be used for building messages for other locales.
        /// </summary>
        /// <param name="messageOrKey">
        ///     Key to addition result information, a key into
        ///     ExceptionMessages, or the information
        ///     itself if the key doesn't exist.
        /// </param>
        /// <param name="arguments">
        ///     The modifying arguments to be included in the
        ///     message string.
        /// </param>
        /// <param name="resultCode">
        ///     The result code returned.
        /// </param>
        /// <param name="serverMsg">
        ///     Error message specifying additional information
        ///     from the server.
        /// </param>
        /// <param name="matchedDn">
        ///     The maximal subset of a specified DN which could
        ///     be matched by the server on a search operation.
        /// </param>
        public LdapException(string messageOrKey, object[] arguments, LdapResultCode resultCode, string serverMsg,
            string matchedDn)
            : this(messageOrKey, arguments, resultCode, serverMsg, matchedDn, null)
        {
        }

        /// <summary>
        ///     Constructs an exception with a detailed message obtained from the
        ///     specified. <code>MessageOrKey</code> String and modifying arguments.
        ///     Additional parameters specify the result code, a message returned
        ///     from the server, a matchedDN returned from
        ///     the server, and a rootException which is the underlying cause of an error
        ///     on the client.
        ///     The String is used either as a message key to obtain a localized
        ///     messsage from ExceptionMessages, or if there is no key in the
        ///     resource matching the text, it is used as the detailed message itself.
        ///     The message in the default locale is built with the supplied arguments,
        ///     which are saved to be used for building messages for other locales.
        /// </summary>
        /// <param name="messageOrKey">
        ///     Key to addition result information, a key into
        ///     ExceptionMessages, or the information
        ///     itself if the key doesn't exist.
        /// </param>
        /// <param name="arguments">
        ///     The modifying arguments to be included in the
        ///     message string.
        /// </param>
        /// <param name="resultCode">
        ///     The result code returned.
        /// </param>
        /// <param name="serverMsg">
        ///     Error message specifying additional information
        ///     from the server.
        /// </param>
        /// <param name="rootException">
        ///     A throwable which is the underlying cause
        ///     of the LdapResultCode.
        /// </param>
        /// <param name="matchedDn">
        ///     The maximal subset of a specified DN which could
        ///     be matched by the server on a search operation.
        /// </param>
        internal LdapException(string messageOrKey, object[] arguments, LdapResultCode resultCode, string serverMsg,
            string matchedDn, Exception rootException)
            : base(ResourcesHandler.GetMessage(messageOrKey, arguments))
        {
            _messageOrKey = messageOrKey;
            _arguments = arguments;
            ResultCode = resultCode;
            Cause = rootException;
            MatchedDn = matchedDn;
            _serverMessage = serverMsg;
        }

        /// <summary>
        ///     Returns the error message from the Ldap server, if this message is
        ///     available (that is, if this message was set). If the message was not set,
        ///     this method returns null.
        /// </summary>
        /// <returns>
        ///     The error message or null if the message was not set.
        /// </returns>
        public string LdapErrorMessage
        {
            get
            {
                if ((object)_serverMessage != null && _serverMessage.Length == 0)
                {
                    return null;
                }

                return _serverMessage;
            }
        }

        /// <summary>
        ///     Returns the lower level Exception which caused the failure, if any.
        ///     For example, an IOException with additional information may be returned
        ///     on a CONNECT_ERROR failure.
        /// </summary>
        public Exception Cause { get; }

        /// <summary>
        ///     Returns the result code from the exception.
        ///     The codes are defined as. <code>public final static int</code> members
        ///     of the Ldap Exception class. If the exception is a
        ///     result of error information returned from a directory operation, the
        ///     code will be one of those defined for the class. Otherwise, a local error
        ///     code is returned.
        /// </summary>
        public LdapResultCode ResultCode { get; }

        /// <summary>
        ///     Returns the part of a submitted distinguished name which could be
        ///     matched by the server.
        ///     If the exception was caused by a local error, such as no server
        ///     available, the return value is null. If the exception resulted from
        ///     an operation being executed on a server, the value is an empty string
        ///     except when the result of the operation was one of the following:.
        ///     <ul>
        ///         <li>NO_SUCH_OBJECT</li>
        ///         <li>ALIAS_PROBLEM</li>
        ///         <li>INVALID_DN_SYNTAX</li>
        ///         <li>ALIAS_DEREFERENCING_PROBLEM</li>
        ///     </ul>
        /// </summary>
        /// <returns>
        ///     The part of a submitted distinguished name which could be
        ///     matched by the server or null if the error is a local error.
        /// </returns>
        public string MatchedDn { get; }

        public override string Message => ResultCodeToString();

        /// <summary>
        ///     Returns a string representing the result code in the default
        ///     locale.
        /// </summary>
        /// <returns>
        ///     The message for the result code in the LdapException object.
        /// </returns>
        public string ResultCodeToString()
        {
            return ResourcesHandler.GetResultString(ResultCode);
        }

        /// <summary>
        ///     Returns a string representing the specified result code in the default
        ///     locale.
        /// </summary>
        /// <param name="code">
        ///     The result code for which a message is to be returned.
        /// </param>
        /// <returns>
        ///     The message corresponding to the specified result code, or
        ///     or null if the message is not available for the default locale.
        /// </returns>
        public static string ResultCodeToString(LdapResultCode code)
        {
            return ResourcesHandler.GetResultString(code);
        }

        /// <summary>
        ///     Returns a string representing the result code in the
        ///     specified locale.
        /// </summary>
        /// <param name="locale">
        ///     The locale in which to render the error message.
        /// </param>
        /// <returns>
        ///     A message corresponding to the result code in the
        ///     specified locale, or null if the message is not available
        ///     for the requested locale.
        /// </returns>
        public string ResultCodeToString(CultureInfo locale)
        {
            return ResourcesHandler.GetResultString(ResultCode, locale);
        }

        /// <summary>
        ///     Returns a string representing the specified error code in the
        ///     specified locale.
        /// </summary>
        /// <param name="code">
        ///     The result code for which a message is to be
        ///     returned.
        /// </param>
        /// <param name="locale">
        ///     The locale in which to render the message.
        /// </param>
        /// <returns>
        ///     A message corresponding to the result code in the
        ///     specified locale, or null if the message is not available
        ///     for the requested locale.
        /// </returns>
        public static string ResultCodeToString(LdapResultCode code, CultureInfo locale)
        {
            return ResourcesHandler.GetResultString(code, locale);
        }

        /// <summary>
        ///     returns a string of information about the exception and the
        ///     the nested exceptions, if any.
        /// </summary>
        public override string ToString()
        {
            return GetExceptionString("LdapException");
        }

        /// <summary>
        ///     builds a string of information about the exception and the
        ///     the nested exceptions, if any.
        /// </summary>
        /// <param name="exception">
        ///     The name of the exception class.
        /// </param>
        internal string GetExceptionString(string exception)
        {
            string tmsg;

            // Format the basic exception information

            // Craft a string from the resouce file
            var msg = ResourcesHandler.GetMessage(
                "TOSTRING",
                new object[] {exception, base.Message, ResultCode, ResultCodeToString() });

            // If found no string from resource file, use a default string
            if (msg.ToUpper().Equals("TOSTRING".ToUpper()))
            {
                msg = exception + ": (" + ResultCode + ") " + ResultCodeToString();
            }

            // Add server message
            if ((object)_serverMessage != null && _serverMessage.Length != 0)
            {
                tmsg = ResourcesHandler.GetMessage("SERVER_MSG", new object[] {exception, _serverMessage });

                // If found no string from resource file, use a default string
                if (tmsg.ToUpper().Equals("SERVER_MSG".ToUpper()))
                {
                    tmsg = exception + ": Server Message: " + _serverMessage;
                }

                msg = msg + '\n' + tmsg;
            }

            // Add Matched DN message
            if ((object)MatchedDn != null)
            {
                tmsg = ResourcesHandler.GetMessage("MATCHED_DN", new object[] {exception, MatchedDn });

                // If found no string from resource file, use a default string
                if (tmsg.ToUpper().Equals("MATCHED_DN".ToUpper()))
                {
                    tmsg = exception + ": Matched DN: " + MatchedDn;
                }

                msg = msg + '\n' + tmsg;
            }

            if (Cause != null)
            {
                msg = msg + '\n' + Cause;
            }

            return msg;
        }
    }
}